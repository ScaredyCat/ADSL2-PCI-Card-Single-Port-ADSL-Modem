# Makefile.in generated by automake 1.9 from Makefile.am.
# lib/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.




SOURCES = $(libzebra_a_SOURCES)

srcdir = .
top_srcdir = ..

pkgdatadir = $(datadir)/zebra
pkglibdir = $(libdir)/zebra
pkgincludedir = $(includedir)/zebra
top_builddir = ..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
host_triplet = i386-redhat-linux-gnu
subdir = lib
DIST_COMMON = $(noinst_HEADERS) $(srcdir)/Makefile.am \
	$(srcdir)/Makefile.in ChangeLog
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
LIBRARIES = $(noinst_LIBRARIES)
ARFLAGS = cru
libzebra_a_AR = $(AR) $(ARFLAGS)
am__libzebra_a_SOURCES_DIST = version.c network.c pid_output.c \
	getopt.c getopt1.c daemon.c print_version.c checksum.c \
	vector.c linklist.c vty.c command.c sockunion.c prefix.c \
	thread.c if.c memory.c buffer.c table.c hash.c filter.c \
	routemap.c distribute.c stream.c str.c log.c plist.c zclient.c \
	sockopt.c smux.c md5.c keychain.c
#am_libzebra_a_OBJECTS =  \
#	version.$(OBJEXT) \
#	network.$(OBJEXT) \
#	pid_output.$(OBJEXT) \
#	getopt.$(OBJEXT) \
#	getopt1.$(OBJEXT) \
#	daemon.$(OBJEXT) \
#	print_version.$(OBJEXT) \
#	checksum.$(OBJEXT) \
#	vector.$(OBJEXT) \
#	linklist.$(OBJEXT) \
#	vty.$(OBJEXT) \
#	command.$(OBJEXT) \
#	sockunion.$(OBJEXT) \
#	prefix.$(OBJEXT) \
#	thread.$(OBJEXT) if.$(OBJEXT) \
#	memory.$(OBJEXT) \
#	buffer.$(OBJEXT) \
#	table.$(OBJEXT) \
#	hash.$(OBJEXT) \
#	filter.$(OBJEXT) \
#	routemap.$(OBJEXT) \
#	distribute.$(OBJEXT) \
#	stream.$(OBJEXT) \
#	str.$(OBJEXT) log.$(OBJEXT) \
#	plist.$(OBJEXT) \
#	zclient.$(OBJEXT) \
#	sockopt.$(OBJEXT) \
#	smux.$(OBJEXT) md5.$(OBJEXT) \
#	keychain.$(OBJEXT)
am_libzebra_a_OBJECTS =  \
	version.$(OBJEXT) \
	network.$(OBJEXT) \
	pid_output.$(OBJEXT) \
	getopt.$(OBJEXT) \
	getopt1.$(OBJEXT) \
	daemon.$(OBJEXT) \
	print_version.$(OBJEXT) \
	checksum.$(OBJEXT) \
	vector.$(OBJEXT) \
	linklist.$(OBJEXT) \
	sockunion.$(OBJEXT) \
	prefix.$(OBJEXT) \
	thread.$(OBJEXT) if.$(OBJEXT) \
	memory.$(OBJEXT) \
	buffer.$(OBJEXT) \
	table.$(OBJEXT) hash.$(OBJEXT) \
	filter.$(OBJEXT) \
	distribute.$(OBJEXT) \
	stream.$(OBJEXT) str.$(OBJEXT) \
	log.$(OBJEXT) plist.$(OBJEXT) \
	sockopt.$(OBJEXT) \
	smux.$(OBJEXT) md5.$(OBJEXT) \
	keychain.$(OBJEXT)
libzebra_a_OBJECTS = $(am_libzebra_a_OBJECTS)
DEFAULT_INCLUDES = -I. -I$(srcdir) -I$(top_builddir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(libzebra_a_SOURCES)
DIST_SOURCES = $(am__libzebra_a_SOURCES_DIST)
HEADERS = $(noinst_HEADERS)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /Danube/3.0.5/source/user/opensource/zebra-0.94/missing --run aclocal-1.9
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /Danube/3.0.5/source/user/opensource/zebra-0.94/missing --run tar
AR = mips-linux-ar
AUTOCONF = ${SHELL} /Danube/3.0.5/source/user/opensource/zebra-0.94/missing --run autoconf
AUTOHEADER = ${SHELL} /Danube/3.0.5/source/user/opensource/zebra-0.94/missing --run autoheader
AUTOMAKE = ${SHELL} /Danube/3.0.5/source/user/opensource/zebra-0.94/missing --run automake-1.9
AWK = gawk
BGPD = 
CC = mips-linux-gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2 -Wall $(IFX_CFLAGS)
CONFIGURE_DEBUG_RIPD_STANDALONE_FALSE = 
CONFIGURE_DEBUG_RIPD_STANDALONE_TRUE = #
CONFIGURE_RIPD_STANDALONE_FALSE = #
CONFIGURE_RIPD_STANDALONE_TRUE = 
CPP = mips-linux-cpp
CPPFLAGS = 
CURSES = 
CYGPATH_W = echo
DEFS = -DHAVE_CONFIG_H -DSYSCONFDIR=\"$(sysconfdir)/\"
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
GREP = /bin/grep
IF_METHOD = if_netlink.o
IF_PROC = if_proc.o
INCLUDES =  -I.. -I$(top_srcdir) -I$(top_srcdir)/lib
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
IPFORWARD = ipforward_proc.o
KERNEL_METHOD = 
LDFLAGS =  $(IFX_LDFLAGS)
LIBOBJS = 
LIBPAM = 
LIBS = -lm -lcrypt 
LIB_IPV6 = 
LIB_REGEX = 
LTLIBOBJS = 
MAKEINFO = ${SHELL} /Danube/3.0.5/source/user/opensource/zebra-0.94/missing --run makeinfo
MULTIPATH_NUM = 1
OBJEXT = o
OSPF6D = 
OSPFD = 
OTHER_METHOD = 
PACKAGE = zebra
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
RANLIB = mips-linux-ranlib
RIPD = ripd
RIPNGD = 
RTREAD_METHOD = rtread_netlink.o
RT_METHOD = rt_netlink.o
SET_MAKE = 
SHELL = /bin/sh
STRIP = strip
VERSION = 0.94
VTYSH = 
ZEBRA = 
ac_ct_CC = 
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i386-pc-linux-gnu
build_alias = i386-pc-linux-gnu
build_cpu = i386
build_os = linux-gnu
build_vendor = pc
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = i386-redhat-linux-gnu
host_alias = i386-redhat-linux
host_cpu = i386
host_os = linux-gnu
host_vendor = redhat
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = /Danube/3.0.5/source/user/opensource/zebra-0.94/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mkdir_p = mkdir -p --
oldincludedir = /usr/include
pdfdir = ${docdir}
prefix = /usr
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target_alias = mips-linux
noinst_LIBRARIES = libzebra.a
#libzebra_a_SOURCES = \
#	version.c network.c pid_output.c getopt.c getopt1.c daemon.c \
#	print_version.c checksum.c vector.c linklist.c vty.c command.c \
#	sockunion.c prefix.c thread.c if.c memory.c buffer.c table.c hash.c \
#	filter.c routemap.c distribute.c stream.c str.c log.c plist.c \
#	zclient.c sockopt.c smux.c md5.c keychain.c


#libzebra_a_SOURCES = \
#	version.c network.c pid_output.c getopt.c getopt1.c daemon.c \
#	print_version.c checksum.c vector.c linklist.c vty.c command.c \
#	sockunion.c prefix.c thread.c if.c memory.c buffer.c table.c hash.c \
#	filter.c routemap.c distribute.c stream.c str.c log.c plist.c \
#	zclient.c sockopt.c smux.c md5.c keychain.c
# chandrav -- for removing unneeded files for ripd_standalone
libzebra_a_SOURCES = \
	version.c network.c pid_output.c getopt.c getopt1.c daemon.c \
	print_version.c checksum.c vector.c linklist.c \
	sockunion.c prefix.c thread.c if.c memory.c buffer.c table.c hash.c \
	filter.c distribute.c stream.c str.c log.c plist.c \
	sockopt.c smux.c md5.c keychain.c

libzebra_a_DEPENDENCIES = 
libzebra_a_LIBADD = 
noinst_HEADERS = \
	buffer.h command.h filter.h getopt.h hash.h if.h linklist.h log.h \
	memory.h network.h prefix.h routemap.h distribute.h sockunion.h \
	str.h stream.h table.h thread.h vector.h version.h vty.h zebra.h \
	plist.h zclient.h sockopt.h smux.h md5-gnu.h keychain.h

EXTRA_DIST = regex.c regex-gnu.h
all: all-am

.SUFFIXES:
.SUFFIXES: .c .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign  lib/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  lib/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

clean-noinstLIBRARIES:
	-test -z "$(noinst_LIBRARIES)" || rm -f $(noinst_LIBRARIES)
libzebra.a: $(libzebra_a_OBJECTS) $(libzebra_a_DEPENDENCIES) 
	-rm -f libzebra.a
	$(libzebra_a_AR) libzebra.a $(libzebra_a_OBJECTS) $(libzebra_a_LIBADD)
	$(RANLIB) libzebra.a

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/buffer.Po
include ./$(DEPDIR)/checksum.Po
include ./$(DEPDIR)/command.Po
include ./$(DEPDIR)/daemon.Po
include ./$(DEPDIR)/distribute.Po
include ./$(DEPDIR)/filter.Po
include ./$(DEPDIR)/getopt.Po
include ./$(DEPDIR)/getopt1.Po
include ./$(DEPDIR)/hash.Po
include ./$(DEPDIR)/if.Po
include ./$(DEPDIR)/keychain.Po
include ./$(DEPDIR)/linklist.Po
include ./$(DEPDIR)/log.Po
include ./$(DEPDIR)/md5.Po
include ./$(DEPDIR)/memory.Po
include ./$(DEPDIR)/network.Po
include ./$(DEPDIR)/pid_output.Po
include ./$(DEPDIR)/plist.Po
include ./$(DEPDIR)/prefix.Po
include ./$(DEPDIR)/print_version.Po
include ./$(DEPDIR)/routemap.Po
include ./$(DEPDIR)/smux.Po
include ./$(DEPDIR)/sockopt.Po
include ./$(DEPDIR)/sockunion.Po
include ./$(DEPDIR)/str.Po
include ./$(DEPDIR)/stream.Po
include ./$(DEPDIR)/table.Po
include ./$(DEPDIR)/thread.Po
include ./$(DEPDIR)/vector.Po
include ./$(DEPDIR)/version.Po
include ./$(DEPDIR)/vty.Po
include ./$(DEPDIR)/zclient.Po

.c.o:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c $<

.c.obj:
	if $(COMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) \
#	$(COMPILE) -c `$(CYGPATH_W) '$<'`
uninstall-info-am:

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LIBRARIES) $(HEADERS)
installdirs:
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-generic clean-noinstLIBRARIES mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-exec-am:

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-info-am

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-generic \
	clean-noinstLIBRARIES ctags distclean distclean-compile \
	distclean-generic distclean-tags distdir dvi dvi-am html \
	html-am info info-am install install-am install-data \
	install-data-am install-exec install-exec-am install-info \
	install-info-am install-man install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-info-am


version.c: Makefile
	echo '' >version.c
	echo 'char *host_name = "$(host_alias)";' >>version.c
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
