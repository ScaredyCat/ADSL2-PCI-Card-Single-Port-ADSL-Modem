.\" Process this file with
.\" groff -man -Tascii foo.1
.\"
.\" "verbatim" environment (from strace.1)
.de CW
.sp
.nf
.ft CW
..
.de CE
.ft
.fi
.sp
..
.\"
.TH fakeroot 1 "10 November 2002" "Debian Project" "Debian GNU/Linux manual"
.\" Manpage by J.H.M. Dassen <jdassen@wi.LeidenUniv.nl>
.SH NAMN
fakeroot \- utför ett kommando i en miljö som fejkar
root-privilegier för filmanipulation
.SH SYNOPSIS
.B fakeroot 
.B [\-l|\-\-lib
.IB bibliotek] 
.B [-\-faked
.IB fejkad-binär] 
.BI [\-\-]
.BI [kommando]
.SH BESKRIVNING
.B fakeroot
utför ett kommando i en miljö där kommandot tror sig ha
root-privilegier för filmanipulering. Detta är användbart för
att ge användare möjlighet att skapa arkiv (tar, ar, .deb osv)
som innehåller filer med root-rättigheter/ägarskap.
Utan
.B fakeroot
tvingas man att ha root-privilegier för att skapa de filer
arkivet består av med korrekt ägarskaps- och
rättighetsinformation, alternativt konstruera arkiven manuellt.

.B fakeroot
arbetar genom att ersätta biblioteksfunktionerna för
filrättighetsmodifiering (chmod(2), stat(2), osv) med sådana
som simulerar effekten som de riktiga biblioteksfunktionerna
skulle ha haft om användaren verkligen varit root. Dessa
funktioner finns samlade i biblioteket
.B /usr/lib/libfakeroot.so*
som laddas genom
\fBLD_PRELOAD\fP-mekanismen hos den dynamiska länkaren (se
.BR ld.so (8))

Om du planerar att bygga paket med hjälp av
.BR fakeroot ,
försök först att bygga fakeroot-paketet:
"debian/rules build"-stadiet har ett par tester (som mestadels
testar efter buggar i gamla versioner av fakeroot).
Om dessa tester misslyckas (till exempel på grund av att du har
vissa libc5-program på ditt system) så är det troligt att
du också kommer att misslyckas bygga andra paket,
och det är möjligt att dessa fel blir betydligt svårare att
hitta.

Märk väl att det är bäst att inte bygga binärerna själva
med hjälp av fakeroot. Särskilt configure och liknande program
ogillar att systemet plötsligt beter sig annorlunda än vad de
förväntar sig. Det är också möjligt att dessa program rensar
bort vissa miljövariabler som fakeroot behöver.

.SH FLAGGOR
.TP
.BI \-\-lib \ bibliotek
Ange ett alternativt bibliotek med ersättningsfunktioner.
.TP
.BI \-\-faked \ binär
Ange en alternativ binär att använda istället för faked(1).
.TP
.BI [\-\-] \ kommando
Det kommando som du vill att fakeroot skall utföra. Använd `--'
om kommandoraden kan tänkas förvirra fakeroots
kommandoradstolkning.

.SH EXEMPEL
Här är ett exempel på hur
.BR fakeroot
kan användas.
Notera att i den fejkade root-miljön så lyckas filmanipulering
som kräver root-privilegier, trots att den egentligen inte
utförs.
.CW
$  whoami
joost
$ fakeroot /bin/bash
#  whoami
root
# mknod hda3 b 3 1
# ls -ld hda3
brw-r--r--   1 root     root       3,   1 Jul  2 22:58 hda3
# chown joost:root hda3
# ls -ld hda3
brw-r--r--   1 joost    root       3,   1 Jul  2 22:58 hda3
# ls -ld /
drwxr-xr-x  20 root     root         1024 Jun 17 21:50 /
# chown joost:users /
# chmod a+w /
# ls -ld /
drwxrwxrwx  20 joost    users        1024 Jun 17 21:50 /
# exit
$ ls -ld /
drwxr-xr-x  20 root     root         1024 Jun 17 21:50 //
$ ls -ld hda3
-rw-r--r--   1 joost    users           0 Jul  2 22:58 hda3
.CE
Enbart de operationer som användaren
.B joost
skulle kunna ha genomfört som sig själv utförs på riktigt.

.B fakeroot
skrevs speciellt i syfte att ge användare möjlighet att
skapa Debian GNU/Linux-paket (i
.BR deb(5)
format) utan att behöva root-privilegier.
Detta kan utföras genom kommandon såsom
.B dpkg-buildpackage -rfakeroot
eller
.B debuild -rfakeroot
(-rfakeroot är numera standard i debuild, så du behöver inte
ens använda den parametern).
.SH SÄKERHETSASPEKTER
.B fakeroot
är ett vanligt program utan setuid. Det ger inte användaren
några extra privilegier, och minskar inte systemets säkerhet.
.SH FILER
.I /usr/lib/libfakeroot/libfakeroot.so*
Det delade bibliotek som innehåller ersättningsfunktionerna.
.SH MILJÖ
.B 
.IP FAKEROOTKEY
Den nyckel som används för att kommunicera med
fakeroot-daemonen. Varje program som startats med korrekt
.B LD_PRELOAD
och en
.B FAKEROOTKEY
för en körande daemon kommer automatiskt att ansluta till den
daemonen, och kommer att ha samma fejkade syn på filsystemets
ägarskap och rättigheter, givet att daemonen och programmet som
ansluter till den startats av samma användare.
.SH BEGRÄNSNINGAR
.B
.IP "Biblioteksversioner"
Varje kommando som utförs inom
.B fakeroot 
måste vara länkat mot samma version av libc som
.B fakeroot
självt. Eftersom Potato versionen av Debian numera enbart
använder libc6 (glibc2.1), är inte detta något större problem
längre.
.B
.IP open()/create()
fakeroot innehåller inga ersättningsfunktioner för open(),
create(), osv. Så om användaren
.B joost
antingen utför
.CW
touch foo
fakeroot 
ls -al foo
.CE
eller omvänt,
.CW
fakeroot
touch foo
ls -al foo
.CE
så kan fakeroot inte på något sätt känna till att i det första
fallet så borde ägaren för filen foo vara
.B joost
men i det senare fallet
.BR root .
När det gäller Debian-paket, så är det alltid ok att ge alla
"okända" filer uid=gid=0. Den korrekta lösningen på det här
problemet är att även ha en ersättningsfunktion för
.B open() 
och 
.BR create() ,
men det skapar andra problem, såsom paketet libtricks visar
exempel på. Det paketet har ersättningar för betydligt
fler funktioner, och försökte att göra betydligt mer än
.B fakeroot .
Det visade sig att en smärre uppgradering av libc (från en
version där funktionen
.BR stat()
inte använde sig av
.BR open()
till en version där
.BR stat()
ibland använde sig av
.BR open() ),
orsakade oförklarliga segmenteringsfel (dvs,
.BR stat()
i libc6 anropade ersättningsfunktionen för
.BR open() ,
som senare anropade libc6 version av
.BR stat() ,
osv).
Att fixa dessa problem var inte enkelt, och när så gjorts var
det bara en tidsfråga innan andra funktioner började använda
sig av open(). För att inte tala om problemen med att porta libtricks
till en annan plattform. Sålunda beslöt jag mig för att hålla
antalet ersättningsfunktioner i fakeroot så lågt som möjligt,
för att begränsa sannolikheten för `kollisioner'.
.B
.IP "GNU configure (och liknande program)"
fakeroot ändrar hur systemet beter sig. Program som försöker
känna av systemets beteende (exempelvis GNU configure) kan bli
förvirrade av detta (och även om de inte blir det så kan
fakeroot bli förvirrat). Därför är det inte rekommenderat att
utföra "configure" inifrån fakeroot. Då configure bör anropas
av "debian/rules build", så borde "dpkg-buildpackage -rfakeroot"
ta hand om detta på ett korrekt sätt.
.SH BUGGAR
fakeroot har ingen ersättningsfunktion för open(). Detta i sig
självt är inget fel, men om ett program utför
open("file", O_WRONLY, 000), försöker skriva till filen "file",
stänger den, och sedan försöker att läsa filen, så misslyckas
detta då filen kommer att ha rättigheterna 000. Buggen består i
att om en process med root-privilegier försöker sig på det
samma, så kommer anropet till open() att lyckas, eftersom
filrättigheter inte kontrolleras alls för root.
Jag valde att inte skriva ersättningsfunktioner för open(),
eftersom open() används av många andra funktioner i libc (även
de som har ersättningsfunktioner), vilket ger upphov till
cirkelreferenser eller potential för cirkelreferenser ifall
implementationen av vissa funktioner i libc förändras).
.SH LICENS
.B fakeroot
distribueras under GNU General Public License.
(GPL 2.0 eller senare).
.SH FÖRFATTARE
joost witteveen
.RI < joostje@debian.org >
.SH MANUALSIDA
till större delen skriven av
J.H.M. Dassen 
.RI <jdassen@wi.LeidenUniv.nl> 
med ett flertal ändringar/tillägg av joost.
.SH "SE ÄVEN"
.BR faked (1)
.BR dpkg-buildpackage (1),
.BR debuild (1)
.BR /usr/share/doc/fakeroot/DEBUG
.SH ÖVERSÄTTNING
David Weinehall
.RI < tao@kernel.org >
